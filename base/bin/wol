#!/usr/bin/python
# vim: set sts=2 sw=2 et:
"""Sends wake-on-lan packets."""

from __future__ import print_function
import argparse
import re
import socket
import struct
import sys
import subprocess

MAC_RE = re.compile(r'^(?i)[0-9a-f]{1,2}(?::[0-9a-f]{1,2}|-[0-9a-f]{1,2}){5}$')
MAC_SEP_RE = re.compile(r'[:-]')
FIRST_WORD = re.compile(r'^\s*(\S+)(?:\s.*)?$')


class MAC(object):
  __slots__ = ('octets',)

  def __init__(self, text):
    if not MAC_RE.match(text):
      host = text
      if '.' not in host:
        domain = subprocess.check_output(['dnsdomainname']).decode('utf-8').strip()
        if domain:
          host += '.' + domain
      line = subprocess.check_output(['getent', 'ethers', host]).decode('utf-8')
      text = FIRST_WORD.match(line).group(1)
      print('Resolved {} as {}'.format(host, text))
    self.octets = struct.pack('6B', *(int(x, 16) for x in MAC_SEP_RE.split(text)))

  def __str__(self):
    return '{:02x}:{:02x}:{:02x}:{:02x}:{:02x}:{:02x}'.format(*struct.unpack('6B', self.octets))


def IP(text):
  if text == '' or text == '<broadcast>':
    return text
  else:
    try:
      host = text
      line = subprocess.check_output(['getent', 'hosts', host]).decode('utf-8')
      text = FIRST_WORD.match(line).group(1)
      print('Resolved {} as {}'.format(host, text))
    except subprocess.CalledProcessError:
      pass
    packed = socket.inet_aton(text)
    return socket.inet_ntoa(packed)


class MyHelpFormatter(argparse.RawDescriptionHelpFormatter,
                      argparse.ArgumentDefaultsHelpFormatter):
  pass


parser = argparse.ArgumentParser(description=__doc__,
                                 formatter_class=MyHelpFormatter)
parser.add_argument('mac', metavar='MAC-ADDRESS', type=MAC,
                    help='MAC address of the machine to wake')
parser.add_argument('net', metavar='IP-ADDRESS', type=IP,
                    nargs='?', default='<broadcast>',
                    help=('IP address of the machine to wake, or '
                          'network broadcast address of its LAN segment'))
args = parser.parse_args()

packet = b'\xff' * 6 + args.mac.octets * 20

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
try:
  s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
  s.sendto(packet, (args.net, 7))
  print('Sent wake-on-lan packet for {} to {}'.format(args.mac, args.net))
finally:
  s.close()
